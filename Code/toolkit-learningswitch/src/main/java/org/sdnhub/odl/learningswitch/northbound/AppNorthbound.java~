
package org.sdnhub.odl.learningswitch.northbound;

import org.sdnhub.odl.learningswitch.ILearningSwitch;
import org.sdnhub.odl.learningswitch.Table;
import org.sdnhub.odl.learningswitch.MacTable.MacPortTableElem;
import org.sdnhub.odl.learningswitch.internal.LearningSwitch;
import org.codehaus.enunciate.jaxrs.StatusCodes;
import org.codehaus.enunciate.jaxrs.TypeHint;
import org.opendaylight.controller.sal.reader.IReadService;
import org.opendaylight.controller.sal.utils.ServiceHelper;
import org.opendaylight.controller.sal.utils.HexEncode;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
import javax.ws.rs.core.UriInfo;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.adapters.XmlAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import org.codehaus.enunciate.jaxrs.ResponseCode;
import org.opendaylight.controller.northbound.commons.RestMessages;
import org.opendaylight.controller.northbound.commons.exception.ServiceUnavailableException;
import org.opendaylight.controller.northbound.commons.exception.UnauthorizedException;
import org.opendaylight.controller.northbound.commons.utils.NorthboundUtils;
import org.opendaylight.controller.sal.authorization.Privilege;
import org.opendaylight.controller.sal.core.NodeConnector;
import org.opendaylight.controller.sal.utils.Status;
import org.opendaylight.controller.switchmanager.ISwitchManager;
import org.opendaylight.controller.forwardingrulesmanager.FlowConfig;
import org.opendaylight.controller.forwardingrulesmanager.IForwardingRulesManager;
import org.opendaylight.controller.switchmanager.ISwitchManager;
import org.opendaylight.controller.switchmanager.Switch;
import org.opendaylight.controller.sal.core.Node;
import org.opendaylight.controller.sal.core.Description;
import org.opendaylight.controller.sal.core.Name;
import org.opendaylight.controller.switchmanager.SwitchConfig;
import org.opendaylight.controller.sal.reader.FlowOnNode;




/**
 * Northbound REST API
 *
 * This entire web class can be accessed via /northbound prefix as specified in
 * web.xml
 *
 * <br>
 * <br>
 * Authentication scheme : <b>HTTP Basic</b><br>
 * Authentication realm : <b>opendaylight</b><br>
 * Transport : <b>HTTP and HTTPS</b><br>
 * <br>
 * HTTPS Authentication is disabled by default.
 */
@Path("/")
public class AppNorthbound {
    @Context
    private UriInfo _uriInfo;
    private String username;

    @Context
    public void setSecurityContext(SecurityContext context) {
        if (context != null && context.getUserPrincipal() != null) {
            username = context.getUserPrincipal().getName();
        }
    }

    protected String getUserName() {
        return username;
    }
    
    
    /**
    *
    * Get current function (hub or switch) - GET REST API call
    *
    * @return A response string
    *
    * <pre>
    * Example:
    *
    * Request URL:
    * http://localhost:8080/app/northbound/learningswitch/function/
    *
    * Response body in XML:
    * &lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
    * switch
    *
    * Response body in JSON:
    * { "function" : "hub"}
    * </pre>
    */
    @Path("/Firewall/Protocols")
    @GET
    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    @StatusCodes()
    public ArrayList<Byte> getProtocolsData() {
        if (!NorthboundUtils.isAuthorized(getUserName(), "default", Privilege.WRITE, this)) {
            throw new UnauthorizedException("User is not authorized to perform this operation");
        }
        IFirewall firewall = (IFirewall) ServiceHelper.getGlobalInstance(IFirewall.class, this);
        if (firewall == null) {
            throw new ServiceUnavailableException("Simple Service " + RestMessages.SERVICEUNAVAILABLE.toString());
        }      
        
        return firewall.getBlockedProtocols();
    }

    @Path("/Firewall/Ports")
    @GET
    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    @StatusCodes()
    public ArrayList<Short> getPortsData() {
        if (!NorthboundUtils.isAuthorized(getUserName(), "default", Privilege.WRITE, this)) {
            throw new UnauthorizedException("User is not authorized to perform this operation");
        }
        IFirewall firewall = (IFirewall) ServiceHelper.getGlobalInstance(IFirewall.class, this);
        if (firewall == null) {
            throw new ServiceUnavailableException("Simple Service " + RestMessages.SERVICEUNAVAILABLE.toString());
        }
        
        return firewall.getBlockedPorts();
    }
    
    @Path("/Firewall/IP")
    @GET
    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    @StatusCodes()
    public ArrayList<String> getIPData() {
        if (!NorthboundUtils.isAuthorized(getUserName(), "default", Privilege.WRITE, this)) {
            throw new UnauthorizedException("User is not authorized to perform this operation");
        }
        IFirewall firewall = (IFirewall) ServiceHelper.getGlobalInstance(IFirewall.class, this);
        if (firewall == null) {
            throw new ServiceUnavailableException("Simple Service " + RestMessages.SERVICEUNAVAILABLE.toString());
        }
        
        ArrayList<InetAddress> ip = firewall.getBlockedIPs();
        
        //Convert InetAddress to IP address as String
        ArrayList<String> returnData = new ArrayList<String>();
        for(InetAddress addr : ip)
        {
        	returnData.add(addr.getHostAddress());
        }
        
        return returnData;
    }
    
    @Path("/Firewall/MAC")
    @GET
    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    @StatusCodes()
    public ArrayList<Long> getMACData() {
        if (!NorthboundUtils.isAuthorized(getUserName(), "default", Privilege.WRITE, this)) {
            throw new UnauthorizedException("User is not authorized to perform this operation");
        }
        IFirewall firewall = (IFirewall) ServiceHelper.getGlobalInstance(IFirewall.class, this);
        if (firewall == null) {
            throw new ServiceUnavailableException("Simple Service " + RestMessages.SERVICEUNAVAILABLE.toString());
        }
        
        return firewall.getBlockedMACs();
    }
	

    /**
     *
     * Sample POST REST API call
     *
     * @return A response string
     *
     *         <pre>
     * Example:
     *
     * Request URL:
     * http://localhost:8080/app/northbound/Firewall
     *
     * Response body in XML:
     * &lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
     * Sample Northbound API
     *
     * Response body in JSON:
     * Sample Northbound API
     * </pre>
     */
     /*
    @Path("/Firewall")
    @POST
    @StatusCodes({ @ResponseCode(code = 201, condition = "Data Inserted successfully"),
        @ResponseCode(code = 401, condition = "User not authorized to perform this operation"),
        @ResponseCode(code = 500, condition = "Error inserting data"),
        @ResponseCode(code = 503, condition = "One or more of service is unavailable")})
    @Consumes({ MediaType.APPLICATION_JSON})
    public Response createData(@TypeHint(Data.class) Data data) {
        if (!NorthboundUtils.isAuthorized(getUserName(), "default", Privilege.WRITE, this)) {
            throw new UnauthorizedException("User is not authorized to perform this operation");
        }
        IFirewall firewall = (IFirewall) ServiceHelper.getGlobalInstance(IFirewall.class, this);
        if (simple == null) {
            throw new ServiceUnavailableException("Simple Service " + RestMessages.SERVICEUNAVAILABLE.toString());
        }
        
        

        return Response.status(Response.Status.CREATED)
                .header("Location", String.format("%s/%s", _uriInfo.getAbsolutePath().toString(),
                                                            uuid.toString()))
                .entity(uuid.toString())
                .build();
    }
    */

    /**
    *
    * Sample PUT REST API call
    *
    * @return A response string
    *
    *         <pre>
    * Example:
    *
    * Request URL:
    * http://localhost:8080/app/northbound/Firewall/{uuid}
    *
    * Response body in XML:
    * &lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
    * Sample Northbound API
    *
    * Response body in JSON:
    * Sample Northbound API
    * </pre>
    */
   @Path("/Firewall/{Protocol}")
   @PUT
   @StatusCodes({ @ResponseCode(code = 200, condition = "Data Updated successfully"),
       @ResponseCode(code = 401, condition = "User not authorized to perform this operation"),
       @ResponseCode(code = 500, condition = "Error updating data"),
       @ResponseCode(code = 503, condition = "One or more of service is unavailable")})
   @Consumes({ MediaType.APPLICATION_JSON})
   public Response updateProtocolData(@PathParam("Protocol") byte protocol) {
       if (!NorthboundUtils.isAuthorized(getUserName(), "default", Privilege.WRITE, this)) {
           throw new UnauthorizedException("User is not authorized to perform this operation");
       }
       IFirewall firewall = (IFirewall) ServiceHelper.getGlobalInstance(IFirewall.class, this);
       if (firewall == null) {
           throw new ServiceUnavailableException("Simple Service " + RestMessages.SERVICEUNAVAILABLE.toString());
       }
       
       firewall.blockProtocol(protocol);
       
       return Response.status(Response.Status.OK).build();
   }
   
   @Path("/Firewall/{Port}")
   @PUT
   @StatusCodes({ @ResponseCode(code = 200, condition = "Data Updated successfully"),
       @ResponseCode(code = 401, condition = "User not authorized to perform this operation"),
       @ResponseCode(code = 500, condition = "Error updating data"),
       @ResponseCode(code = 503, condition = "One or more of service is unavailable")})
   @Consumes({ MediaType.APPLICATION_JSON})
   public Response updatePortData(@PathParam("Port") short port) {
       if (!NorthboundUtils.isAuthorized(getUserName(), "default", Privilege.WRITE, this)) {
           throw new UnauthorizedException("User is not authorized to perform this operation");
       }
       IFirewall firewall = (IFirewall) ServiceHelper.getGlobalInstance(IFirewall.class, this);
       if (firewall == null) {
           throw new ServiceUnavailableException("Simple Service " + RestMessages.SERVICEUNAVAILABLE.toString());
       }
       
       firewall.blockPort(port);
       
       return Response.status(Response.Status.OK).build();
   }
   
   @Path("/Firewall/{IP}")
   @PUT
   @StatusCodes({ @ResponseCode(code = 200, condition = "Data Updated successfully"),
       @ResponseCode(code = 401, condition = "User not authorized to perform this operation"),
       @ResponseCode(code = 500, condition = "Error updating data"),
       @ResponseCode(code = 503, condition = "One or more of service is unavailable")})
   @Consumes({ MediaType.APPLICATION_JSON})
   public Response updateIPData(@PathParam("IP") String IP) {
       if (!NorthboundUtils.isAuthorized(getUserName(), "default", Privilege.WRITE, this)) {
           throw new UnauthorizedException("User is not authorized to perform this operation");
       }
       IFirewall firewall = (IFirewall) ServiceHelper.getGlobalInstance(IFirewall.class, this);
       if (firewall == null) {
           throw new ServiceUnavailableException("Simple Service " + RestMessages.SERVICEUNAVAILABLE.toString());
       }
       
       firewall.blockIP(IP);
       
       return Response.status(Response.Status.OK).build();
   }
   
   @Path("/Firewall/{MAC}")
   @PUT
   @StatusCodes({ @ResponseCode(code = 200, condition = "Data Updated successfully"),
       @ResponseCode(code = 401, condition = "User not authorized to perform this operation"),
       @ResponseCode(code = 500, condition = "Error updating data"),
       @ResponseCode(code = 503, condition = "One or more of service is unavailable")})
   @Consumes({ MediaType.APPLICATION_JSON})
   public Response updateMACData(@PathParam("MAC") String MAC) {
       if (!NorthboundUtils.isAuthorized(getUserName(), "default", Privilege.WRITE, this)) {
           throw new UnauthorizedException("User is not authorized to perform this operation");
       }
       IFirewall firewall = (IFirewall) ServiceHelper.getGlobalInstance(IFirewall.class, this);
       if (firewall == null) {
           throw new ServiceUnavailableException("Simple Service " + RestMessages.SERVICEUNAVAILABLE.toString());
       }
       
       firewall.blockMAC(MAC);
       
       return Response.status(Response.Status.OK).build();
   }

   /**
   *
   * Sample Delete REST API call
   *
   * @return A response string
   *
   *         <pre>
   * Example:
   *
   * Request URL:
   * http://localhost:8080/app/northbound/Firewall/{uuid}
   *
   * Response body in XML:
   * &lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
   * Sample Northbound API
   *
   * Response body in JSON:
   * Sample Northbound API
   * </pre>
   */
  @Path("/Firewall/{Protocol}")
  @DELETE
  @StatusCodes({ @ResponseCode(code = 200, condition = "Data Deleted successfully"),
                 @ResponseCode(code = 401, condition = "User not authorized to perform this operation"),
                 @ResponseCode(code = 500, condition = "Error deleting data"),
                 @ResponseCode(code = 503, condition = "One or more of service is unavailable")})
  @Consumes({ MediaType.APPLICATION_JSON})
  public Response removeProtocolData(@PathParam("Protocol") byte protocol) {
      if (!NorthboundUtils.isAuthorized(getUserName(), "default", Privilege.WRITE, this)) {
          throw new UnauthorizedException("User is not authorized to perform this operation");
      }
      IFirewall firewall = (IFirewall) ServiceHelper.getGlobalInstance(IFirewall.class, this);
      if (firewall == null) {
          throw new ServiceUnavailableException("Simple Service " + RestMessages.SERVICEUNAVAILABLE.toString());
      }
      
      firewall.unblockProtocol(protocol);
      
      return Response.status(Response.Status.OK).build();
  }
  
  @Path("/Firewall/{Port}")
  @DELETE
  @StatusCodes({ @ResponseCode(code = 200, condition = "Data Deleted successfully"),
                 @ResponseCode(code = 401, condition = "User not authorized to perform this operation"),
                 @ResponseCode(code = 500, condition = "Error deleting data"),
                 @ResponseCode(code = 503, condition = "One or more of service is unavailable")})
  @Consumes({ MediaType.APPLICATION_JSON})
  public Response removePortData(@PathParam("Port") short port) {
      if (!NorthboundUtils.isAuthorized(getUserName(), "default", Privilege.WRITE, this)) {
          throw new UnauthorizedException("User is not authorized to perform this operation");
      }
      IFirewall firewall = (IFirewall) ServiceHelper.getGlobalInstance(IFirewall.class, this);
      if (firewall == null) {
          throw new ServiceUnavailableException("Simple Service " + RestMessages.SERVICEUNAVAILABLE.toString());
      }
      
      firewall.unblockPort(port);
      
      return Response.status(Response.Status.OK).build();
  }
  
  @Path("/Firewall/{IP}")
  @DELETE
  @StatusCodes({ @ResponseCode(code = 200, condition = "Data Deleted successfully"),
                 @ResponseCode(code = 401, condition = "User not authorized to perform this operation"),
                 @ResponseCode(code = 500, condition = "Error deleting data"),
                 @ResponseCode(code = 503, condition = "One or more of service is unavailable")})
  @Consumes({ MediaType.APPLICATION_JSON})
  public Response removeIPData(@PathParam("IP") String IP) {
      if (!NorthboundUtils.isAuthorized(getUserName(), "default", Privilege.WRITE, this)) {
          throw new UnauthorizedException("User is not authorized to perform this operation");
      }
      IFirewall firewall = (IFirewall) ServiceHelper.getGlobalInstance(IFirewall.class, this);
      if (firewall == null) {
          throw new ServiceUnavailableException("Simple Service " + RestMessages.SERVICEUNAVAILABLE.toString());
      }
      
      firewall.unblockIP(IP);
      
      return Response.status(Response.Status.OK).build();
  }
  
  @Path("/Firewall/{MAC}")
  @DELETE
  @StatusCodes({ @ResponseCode(code = 200, condition = "Data Deleted successfully"),
                 @ResponseCode(code = 401, condition = "User not authorized to perform this operation"),
                 @ResponseCode(code = 500, condition = "Error deleting data"),
                 @ResponseCode(code = 503, condition = "One or more of service is unavailable")})
  @Consumes({ MediaType.APPLICATION_JSON})
  public Response removeMACData(@PathParam("MAC") String MAC) {
      if (!NorthboundUtils.isAuthorized(getUserName(), "default", Privilege.WRITE, this)) {
          throw new UnauthorizedException("User is not authorized to perform this operation");
      }
      IFirewall firewall = (IFirewall) ServiceHelper.getGlobalInstance(IFirewall.class, this);
      if (firewall == null) {
          throw new ServiceUnavailableException("Simple Service " + RestMessages.SERVICEUNAVAILABLE.toString());
      }
      
      firewall.unblockMAC(MAC);
      
      return Response.status(Response.Status.OK).build();
  }

}

